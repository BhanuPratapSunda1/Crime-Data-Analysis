xlab('YEAR') +
ylab('MURDER')
# Regression Template
# Importing the dataset
dataset = read.csv('DataGroupedByYEAR.csv')
dataset = dataset[,c(1,3)]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the SVR to the dataset
# Create your regressor here
library(e1071)
regressor = svm(formula = ATTEMPT_TO_MURDER ~ YEAR, data = dataset, type = 'eps-regression')
# Predicting a new result
y_pred = predict(regressor, data.frame(YEAR = 2013))
# Visualising the SVR results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$ATTEMPT_TO_MURDER),
colour = 'red') +
geom_line(aes(x = dataset$YEAR, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('ATTEMPT_TO_MURDER Vs.YEAR (SVR Model)') +
xlab('YEAR') +
ylab('ATTEMPT_TO_MURDER')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$YEAR), max(dataset$YEAR), 0.1)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$ATTEMPT_TO_MURDER),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(YEAR = x_grid))),
colour = 'blue') +
ggtitle('ATTEMPT_TO_MURDER Vs.YEAR (SVR Model)') +
xlab('YEAR') +
ylab('ATTEMPT_TO_MURDER')
# Regression Template
# Importing the dataset
dataset = read.csv('DataGroupedByYEAR.csv')
dataset = dataset[,c(1,2)]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the SVR to the dataset
# Create your regressor here
library(e1071)
regressor = svm(formula = MURDER ~ YEAR, data = dataset, type = 'eps-regression')
# Predicting a new result
y_pred = predict(regressor, data.frame(YEAR = 2013))
# Visualising the SVR results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$MURDER),
colour = 'red') +
geom_line(aes(x = dataset$YEAR, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('MURDER Vs.YEAR (SVR Model)') +
xlab('YEAR') +
ylab('MURDER')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$YEAR), max(dataset$YEAR), 0.1)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$MURDER),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(YEAR = x_grid))),
colour = 'blue') +
ggtitle('MURDER Vs.YEAR (SVR Model)') +
xlab('YEAR') +
ylab('MURDER')
arr = array(dataset$MURDER)
ssres = 0
sst = 0
yavg = mean(dataset$MURDER)
ss2 <- array(predict(regressor, newdata = dataset))
for (i in seq(1,length(arr))){
ssres = ssres + (arr[i] - ss2[i])^2
}
for (i in seq(1,length(arr))){
sst = sst + (arr[i] - yavg)^2
}
R2 = 1 - (ssres/sst)
n = nrow(dataset)
AdjR2 = 1 - (1 - R2)*((n - 1)/(n - 1 - 1))
# Regression Template
# Importing the dataset
dataset = read.csv('DataGroupedByYEAR.csv')
dataset = dataset[,c(1,18)]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the SVR to the dataset
# Create your regressor here
library(e1071)
regressor = svm(formula = RIOTS ~ YEAR, data = dataset, type = 'eps-regression')
# Predicting a new result
y_pred = predict(regressor, data.frame(YEAR = 2013))
# Visualising the SVR results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = dataset$YEAR, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('RIOTS Vs.YEAR (SVR Model)') +
xlab('YEAR') +
ylab('RIOTS')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$YEAR), max(dataset$YEAR), 0.1)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(YEAR = x_grid))),
colour = 'blue') +
ggtitle('RIOTS Vs.YEAR (SVR Model)') +
xlab('YEAR') +
ylab('RIOTS')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('dataa.csv')
dataset = dataset[,c(1:844,874)]
# Fitting Random Forest Regression to the dataset
# install.packages('randomForest')
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1:844], y = dataset$TOTAL.IPC.CRIMES, ntree = 50)
# Predicting a new result with Random Forest Regression
#y_pred = predict(regressor, data.frame(YEAR = 2013))
# Visualising the Random Forest Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$TOTAL.IPC.CRIMES),
colour = 'red') +
geom_line(aes(x = dataset$YEAR, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('TOTAL.IPC.CRIMES Vs.YEAR (Random Forest Regression)') +
xlab('YEAR') +
ylab('TOTAL.IPC.CRIMES')
# Importing the dataset
dataset = read.csv('dataa.csv')
dataset = dataset[,c(1:844,874)]
# Fitting Random Forest Regression to the dataset
# install.packages('randomForest')
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1:844], y = dataset$TOTAL.IPC.CRIMES, ntree = 50)
summary(regressor)
# Visualising the Random Forest Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$TOTAL.IPC.CRIMES),
colour = 'red') +
geom_line(aes(x = dataset$YEAR, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('TOTAL.IPC.CRIMES Vs.YEAR (Random Forest Regression)') +
xlab('YEAR') +
ylab('TOTAL.IPC.CRIMES')
arr = array(dataset$TOTAL.IPC.CRIMES)
ssres = 0
sst = 0
yavg = mean(dataset$TOTAL.IPC.CRIMES)
ss2 <- array(predict(regressor, newdata = dataset))
for (i in seq(1,length(arr))){
ssres = ssres + (arr[i] - ss2[i])^2
}
for (i in seq(1,length(arr))){
sst = sst + (arr[i] - yavg)^2
}
R2 = 1 - (ssres/sst)
n = nrow(dataset)
AdjR2 = 1 - (1 - R2)*((n - 1)/(n - 1 - 1))
R2
adjR2
AdjR2
plot(regressor)
regressor
# Random Forest Regression
# Importing the dataset
dataset = read.csv('DataGroupedByYEAR.csv')
dataset = dataset[,c(1,18)]
# Fitting Random Forest Regression to the dataset
# install.packages('randomForest')
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1], y = dataset$RIOTS, ntree = 500)
# Predicting a new result with Random Forest Regression
y_pred = predict(regressor, data.frame(YEAR = 2013))
# Visualising the Random Forest Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$YEAR), max(dataset$YEAR), 0.01)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(YEAR = x_grid))),
colour = 'blue') +
ggtitle('RIOTS Vs. YEAR (Random Forest Regression)') +
xlab('YEAR') +
ylab('RIOTS')
arr = array(dataset$RIOTS)
ssres = 0
sst = 0
yavg = mean(dataset$RIOTS)
ss2 <- array(predict(regressor, newdata = dataset))
for (i in seq(1,length(arr))){
ssres = ssres + (arr[i] - ss2[i])^2
}
for (i in seq(1,length(arr))){
sst = sst + (arr[i] - yavg)^2
}
R2 = 1 - (ssres/sst)
n = nrow(dataset)
AdjR2 = 1 - (1 - R2)*((n - 1)/(n - 1 - 1))
R2
AdjR2
# Polynomial Regression
# Importing the dataset
dataset = read.csv('DataGroupedByYEAR.csv')
dataset = dataset[,c(1,18)]
#dataset[,c(1,2)] = scale(dataset[,c(1,2)])
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Polynomial Regression to the dataset
dataset$YEAR1 = dataset$YEAR^2
dataset$YEAR2 = dataset$YEAR^3
dataset$YEAR3 = dataset$YEAR^4
poly_reg = lm(formula = RIOTS ~ YEAR,
data = dataset)
# Visualising the Polynomial Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = dataset$YEAR, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('RIOTS Vs.YEAR (Polynomial Regression)') +
xlab('YEAR') +
ylab('RIOTS')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$YEAR), max(dataset$YEAR), 0.1)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(YEAR = x_grid,
YEAR1 = x_grid^2,
YEAR2 = x_grid^3,
YEAR3 = x_grid^4))),
colour = 'blue') +
ggtitle('RIOTS Vs.YEAR (Polynomial Regression)') +
xlab('YEAR') +
ylab('RIOTS')
# Predicting a new result with Polynomial Regression
predict(poly_reg, data.frame(YEAR = 2013,
YEAR1 = 2013^2,
YEAR2 = 2013^3,
YEAR3 = 2013^4))
arr = array(dataset$RIOTS)
ssres = 0
sst = 0
yavg = mean(dataset$RIOTS)
ss2 <- array(predict(regressor, newdata = dataset))
for (i in seq(1,length(arr))){
ssres = ssres + (arr[i] - ss2[i])^2
}
for (i in seq(1,length(arr))){
sst = sst + (arr[i] - yavg)^2
}
R2 = 1 - (ssres/sst)
n = nrow(dataset)
AdjR2 = 1 - (1 - R2)*((n - 1)/(n - 1 - 1))
R2
AdjR2
# Polynomial Regression
# Importing the dataset
dataset = read.csv('DataGroupedByYEAR.csv')
dataset = dataset[,c(1,18)]
#dataset[,c(1,2)] = scale(dataset[,c(1,2)])
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Polynomial Regression to the dataset
dataset$YEAR1 = dataset$YEAR^2
dataset$YEAR2 = dataset$YEAR^3
dataset$YEAR3 = dataset$YEAR^4
poly_reg = lm(formula = RIOTS ~ YEAR,
data = dataset)
# Visualising the Polynomial Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = dataset$YEAR, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('RIOTS Vs.YEAR (Polynomial Regression)') +
xlab('YEAR') +
ylab('RIOTS')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$YEAR), max(dataset$YEAR), 0.1)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(YEAR = x_grid,
YEAR1 = x_grid^2,
YEAR2 = x_grid^3,
YEAR3 = x_grid^4))),
colour = 'blue') +
ggtitle('RIOTS Vs.YEAR (Polynomial Regression)') +
xlab('YEAR') +
ylab('RIOTS')
# Predicting a new result with Polynomial Regression
predict(poly_reg, data.frame(YEAR = 2013,
YEAR1 = 2013^2,
YEAR2 = 2013^3,
YEAR3 = 2013^4))
arr = array(dataset$RIOTS)
ssres = 0
sst = 0
yavg = mean(dataset$RIOTS)
ss2 <- array(predict(poly_reg, newdata = dataset))
for (i in seq(1,length(arr))){
ssres = ssres + (arr[i] - ss2[i])^2
}
for (i in seq(1,length(arr))){
sst = sst + (arr[i] - yavg)^2
}
R2 = 1 - (ssres/sst)
n = nrow(dataset)
AdjR2 = 1 - (1 - R2)*((n - 1)/(n - 1 - 1))
R2
AdjR2
poly_reg
summary(poly_reg)
# Random Forest Regression
# Importing the dataset
dataset = read.csv('DataGroupedByYEAR.csv')
dataset = dataset[,c(1,18)]
# Fitting Random Forest Regression to the dataset
# install.packages('randomForest')
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1], y = dataset$RIOTS, ntree = 500)
# Predicting a new result with Random Forest Regression
y_pred = predict(regressor, data.frame(YEAR = 2013))
# Visualising the Random Forest Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$YEAR), max(dataset$YEAR), 0.01)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(YEAR = x_grid))),
colour = 'blue') +
ggtitle('RIOTS Vs. YEAR (Random Forest Regression)') +
xlab('YEAR') +
ylab('RIOTS')
arr = array(dataset$RIOTS)
ssres = 0
sst = 0
yavg = mean(dataset$RIOTS)
ss2 <- array(predict(regressor, newdata = dataset))
for (i in seq(1,length(arr))){
ssres = ssres + (arr[i] - ss2[i])^2
}
for (i in seq(1,length(arr))){
sst = sst + (arr[i] - yavg)^2
}
R2 = 1 - (ssres/sst)
n = nrow(dataset)
AdjR2 = 1 - (1 - R2)*((n - 1)/(n - 1 - 1))
#Error vs.Regresion tree plot
plot(regressor)
R2
summary(regressor)
regressor
# Random Forest Regression
# Importing the dataset
dataset = read.csv('DataGroupedByYEAR.csv')
dataset = dataset[,c(1,18)]
# Fitting Random Forest Regression to the dataset
# install.packages('randomForest')
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1], y = dataset$RIOTS, ntree = 500)
# Predicting a new result with Random Forest Regression
y_pred = predict(regressor, data.frame(YEAR = 2013))
# Visualising the Random Forest Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$YEAR), max(dataset$YEAR), 0.01)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(YEAR = x_grid))),
colour = 'blue') +
ggtitle('RIOTS Vs. YEAR (Random Forest Regression)') +
xlab('YEAR') +
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(YEAR = x_grid))),
colour = 'blue') +
ggtitle('RIOTS Vs. YEAR (Random Forest Regression)') +
xlab('YEAR') +
ylab('RIOTS')
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$RIOTS),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(YEAR = x_grid))),
colour = 'blue') +
ggtitle('RIOTS Vs. YEAR (Random Forest Regression)') +
xlab('YEAR') +
ylab('RIOTS')
View(x_grid)
# Multiple Linear Regression
# Importing the dataset
dataset <- read.csv("dataa.csv")
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
dataset1 <- dataset[, c(1:844,874)]
split = sample.split(dataset1$TOTAL.IPC.CRIMES, SplitRatio = 0.8)
training_set = subset(dataset1, split == TRUE)
test_set = subset(dataset1, split == FALSE)
# Feature Scaling
#training_set[845] = scale(training_set[845])
#test_set[845] = scale(test_set[845])
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = TOTAL.IPC.CRIMES ~ .,
data = training_set)
summary(regressor)
# Predicting the Test set results
y_pred = predict(regressor,newdata = test_set)
#Visualising the test results
plot(test_set$YEAR,y_pred, main = paste("Test set result"), xlab = "Years", ylab = "Predicted Total IPC Crimes")
plot(test_set$YEAR,test_set$TOTAL.IPC.CRIMES, main = paste("Test set"), xlab = "Years", ylab = "Total IPC Crimes")
# Importing the dataset
dataset = read.csv('dataa.csv')
# Regression Template
# Importing the dataset
dataset = read.csv('dataa.csv')
dataset = dataset[,c(1:844,871)]
# Fitting the SVR to the dataset
# Create your regressor here
library(e1071)
regressor = svm(formula = IMPORTATION.OF.GIRLS.FROM.FOREIGN.COUNTRIES ~ ., data = dataset, type = 'eps-regression')
# Predicting a new result
#y_pred = predict(regressor, data.frame(YEAR = 2013))
# Visualising the SVR results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$YEAR, y = dataset$IMPORTATION.OF.GIRLS.FROM.FOREIGN.COUNTRIES),
colour = 'red') +
geom_line(aes(x = dataset$YEAR, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('IMPORTATION.OF.GIRLS.FROM.FOREIGN.COUNTRIES Vs.YEAR (SVR Model)') +
xlab('YEAR') +
ylab('IMPORTATION.OF.GIRLS.FROM.FOREIGN.COUNTRIES')
